#!/usr/bin/env python
import roslib
roslib.load_manifest('facedetector')
import rospy
import sys, select, termios, tty
import time
import Image
import os
import cv2, cv, numpy
from std_msgs.msg import String
from std_msgs.msg import Bool
import sensor_msgs.msg
from dynamic_reconfigure.server import Server as DynamicReconfigureServer
from facedetector.msg import Detection
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import Image

CV_WINDOW_TITLE = "Face detection"

# Node for face detection.
class FaceDetect():

	def detect_faces(self, image, draw=False):
		min_size = (20,20)
		haar_scale = 1.2
		min_neighbors = 2
		haar_flags = 0

		# Convert color input image to grayscale
		gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
		# Scale input image for faster processing
		smallImage = cv2.resize(gray, (int(image.shape[1] / self.image_scale), int(image.shape[0] / self.image_scale)), interpolation=cv2.INTER_LINEAR)
		# Equalize the histogram
		smallImage = cv2.equalizeHist(smallImage)

		# Detect the faces
		faces = self.faceCascade.detectMultiScale(smallImage, haar_scale, min_neighbors, haar_flags, min_size)

		detections = []

		for (x, y, w, h) in faces:
			pt1 = (int(x * self.image_scale), int(y * self.image_scale))
			pt2 = (int((x + w) * self.image_scale), int((y + h) * self.image_scale))

			if draw:
				cv2.rectangle(image, pt1, pt2, cv.RGB(255, 0, 0), 3, 8, 0)

			face_image = gray[pt1[1]:pt2[1], pt1[0]:pt2[0]]

			if self.detect_eyes:
				subimage = face_image[0:int(face_image.shape[0]/2), :]
				eyes = self.eyeCascade.detectMultiScale(subimage, haar_scale, min_neighbors, haar_flags, (15, 15))	

				if len(eyes) > 1:
					detections.append((x,y,w,h,numpy.copy(face_image)))

				if draw:
					for (ex, ey, ew, eh) in eyes:
						# Draw a rectangle around the eye
						cv2.rectangle(image,
						(ex + pt1[0], ey + pt1[1]), (ex + ew + pt1[0], ey + eh + pt1[1]), cv.RGB(255, 0, 0), 1, 8, 0)		

			else:
				detections.append((pt1[0], pt1[1], pt2[0] - pt1[0], pt2[1] - pt1[1], numpy.copy(face_image)))

		return detections

	def toggle_callback(self, data):
		self.enabled = data.data
		if self.enabled:
			rospy.loginfo("Face detection enabled")
		else:
			rospy.loginfo("Face detection disabled")
	      
	def image_callback(self, data):
		if not self.enabled:
			return
		try:
			cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
			detections = self.detect_faces(cv_image, self.cv_window)

			if len(detections) > 0:
				message = Detection()
				message.header.seq = self.message_counter
				message.header.stamp = data.header.stamp #rospy.Time.now()
				message.header.frame_id = data.header.frame_id
				for detection in detections:
					message.x.append(detection[0])
					message.y.append(detection[1])
					message.width.append(detection[2])
					message.height.append(detection[3])
					message.image.append(self.bridge.cv2_to_imgmsg(detection[4], "mono8"))

				self.message_counter += 1
				self.faces_pub.publish(message)
			
			if self.cv_window:
				cv2.imshow(CV_WINDOW_TITLE, cv_image)
				cv2.waitKey(1)

		except CvBridgeError, e:
			print e
	      
	def __init__(self):
		# Get the ~private namespace parameters from command line or launch file
		# Set basic paramateres
		self.image_scale = rospy.get_param('~scale', 3)
		data_path = rospy.get_param('~data_path', 'data/')
		faces_topic = rospy.get_param('~detection_topic', rospy.resolve_name('%s/faces' % rospy.get_name()))
		toggle_topic = rospy.get_param('~toggle_topic', rospy.resolve_name('%s/toggle' % rospy.get_name()))
		image_topic = rospy.get_param('~image_topic', '/camera/image_raw')
		
		self.detect_eyes = rospy.get_param('~detect_eyes', False)

		self.faceCascade = cv2.CascadeClassifier(os.path.join(data_path, "haarcascade_face.xml"))
		if self.detect_eyes:
			self.eyeCascade = cv2.CascadeClassifier(os.path.join(data_path, "haarcascade_eye.xml"))

		# init camera capture stuff
		self.bridge = CvBridge()
		self.image_sub = rospy.Subscriber(image_topic, Image, self.image_callback, queue_size=1)

		# Subscribers and publishers
		self.faces_pub = rospy.Publisher(faces_topic, Detection, queue_size=10)
		self.toggle_sub = rospy.Subscriber(toggle_topic, Bool, self.toggle_callback, queue_size=10)

		# init and call detection
		self.enabled = rospy.get_param('~enabled', True)
		self.cv_window = rospy.get_param('~show_cv_window', False)
		self.message_counter = 0

# Main function.    
if __name__ == '__main__':

        # Initialize the node and name it.
        rospy.init_node('facedetector')
        try:
		fd = FaceDetect()
		rospy.spin()	
        except rospy.ROSInterruptException: pass
